# !usr/bin/env python
# -*- coding: utf-8 -*-
# @Time:2022/5/15 12:53
# @version: 1.0.1
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: run again.Do not edit this file unless you know what you are doing.
# 根据一棵树的中序遍历与后序遍历构造二叉树。
#
# 注意:
# 你可以假设树中没有重复的元素。
#
# 例如，给出
#
# 中序遍历 inorder =[9,3,15,20,7]
# 后序遍历 postorder = [9,15,7,20,3]
#
# 返回如下的二叉树：
#
#     3
#    / \
#   9  20
#  /    \
# 15     7

# class Solution {
#     public TreeNode buildTree(int[] inorder, int[] postorder) {
#         return helper(inorder, postorder, postorder.length - 1, 0,
#         inorder.length - 1);
#     }
#     public TreeNode helper(int[] inorder, int[] postorder,
#     int postEnd, int inStart,
#     int inEnd) {
#         if (inStart > inEnd) {
#             return null;
#         }
#         int currentVal = postorder[postEnd];
#         TreeNode current = new TreeNode(currentVal);
#         int inIndex = 0;
#         for (int i = inStart; i <= inEnd; i++) {
#             if (inorder[i] == currentVal) {
#                 inIndex = i;
#             }
#         }
#         TreeNode left = helper(inorder, postorder,
#         postEnd - (inEnd - inIndex) - 1, inStart, inIndex - 1);
#         TreeNode right = helper(inorder, postorder, postEnd - 1,
#         inIndex + 1, inEnd);
#         current.left = left;
#         current.right = right;
#         return current;
#     }
# }
