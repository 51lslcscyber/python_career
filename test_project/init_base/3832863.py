# !usr/bin/env python
# -*- coding: utf-8 -*-
# @Time:2022/4/23 18:27
# @version: 1.0.1
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: run again.
# Do not edit this file unless you know what you are doing.
# 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi]。
# 请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。
#
#
# 示例 1：
#
# 输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
# 输出：[[1,6],[8,10],[15,18]]
# 解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
#
# 示例 2：
#
# 输入：intervals = [[1,4],[4,5]]
# 输出：[[1,5]]
# 解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。
#
# 提示：
#
# 1 <= intervals.length <= 104
# intervals[i].length == 2
# 0 <= starti <= endi <= 104
class Interval(object):
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e


class Solution(object):
    def list2interval(self, list_interval):
        ret = []
        for i in list_interval:
            interval = Interval(i[0], i[1])
            ret.append(interval)
        return ret

    def interval2list(self, interval):
        ret = []
        x = [0, 0]
        for i in interval:
            x[0] = i.start
            x[1] = i.end
            ret.append(x)
            x = [0, 0]
        return ret

    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if intervals is None:
            return
        ls = len(intervals)
        if ls <= 1:
            return intervals
        intervals = self.list2interval(intervals)
        intervals.sort(key=lambda x: x.start)
        pos = 0
        while pos < len(intervals) - 1:
            if intervals[pos].end >= intervals[pos + 1].start:
                next = intervals.pop(pos + 1)
                if next.end > intervals[pos].end:
                    intervals[pos].end = next.end
            else:
                pos += 1
        intervals = self.interval2list(intervals)
        return intervals


if __name__ == '__main__':
    s = Solution()
    print(s.merge(intervals=[[1, 4], [4, 5]]))
