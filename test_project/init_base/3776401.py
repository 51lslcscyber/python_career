# !usr/bin/env python
# -*- coding: utf-8 -*-
# @Time:2022/4/20 21:37
# @version: 1.0.1
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: run again.Do not edit this file unless you know what you are doing.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def convert_list(head):
    ret = []
    if head is None:
        return
    node = head
    while node is not None:
        ret.append(node.val)
        node = node.next
    return ret


class LinkList:
    def __init__(self):
        self.head = None

    def initList(self, data):
        self.head = ListNode(data[0])
        r = self.head
        p = self.head
        for i in data[1:]:
            node = ListNode(i)
            p.next = node
            p = p.next
        return r


def removeNthFromEnd(head: ListNode, n: int) -> ListNode:
    v = ListNode(0, head)
    handle = v
    index = []
    while v is not None:
        index.append(v)
        v = v.next
    pre = len(index) - n - 1
    next = len(index) - n + 1
    index[pre].next = index[next] if 0 <= next < len(
        index) else None
    return handle.next


class Solution:
    pass


# %%
l = LinkList()
list1 = [1, 2, 3, 4, 5]
head = l.initList(list1)
n = 2
s = Solution()
print(convert_list(removeNthFromEnd(head, n)))

if __name__ == "__main__":
    pass
