# -*- coding: utf-8 -*-

# @Time:2021/10/06
# @version:
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: 
# run again.  Do not edit this file unless you know what you are doing.
# # 文件操作失误
# # 文件操作1
# # 1.生成一个文件file1,每一行随机生成5个数字,数字之间用逗号隔开
# # 2.读取文件file1,计算并输出每一行数字的总和
# # 写文件.
# import random
# lines = 10
# num = 1000000
# nums = 5
# per_write = ''
# for i in range(lines):
#     num_list = []
#     for i in range(nums):
#         n = random.randint(0, num)
#         num_list.append(str(n))
#     per_write += ','.join(num_list) + '\n'
# with open('./file1.txt', 'w', encoding='utf-8') as file1:
#     file1.write(per_write)
#
#
# # 读文件
# with open('./file1.txt', 'r', encoding='utf-8') as file2:
#     read_str = file2.read()
# file2_lines = read_str.split('\n')[:-1]
# sums_dict = {}
# for i in file2_lines:
#     sums_dict[file2_lines.index(i)] = sum(list(eval(i)))
# print(sums_dict)

# # 2.一行把列表重复元素剔除
# a=list(set([1,2,3,1,2,3]))
# print(a)

# # 3.字符反转,所有顺序反转
# print(input()[::-1])

# # 4.英语句子反转，单词不反转
# s = input().split()
# print(' '.join(s[::-1]))

# # 5.计算字符串内所含字符个数
# a = input().lower()
# b = input().lower()
# print(a.count(b))

# # 6.将a=[1, 2, 3, 4]与b=[3, 2, 5]合并，并从小到大排序。
# a = [1, 2, 3, 4]
# b = [3, 2, 5]
# c = (a + b)
# c.sort()
# print(c)

# # 7.用yield 生成指定长度的斐波那契数列(1, 1 ,2 ,3 ,5 ,8 ,13 ,21, …)
# def fab(max):
#     n, a, b = 0, 0, 1
#     while n < max:
#         yield b
#         a, b = b, a + b
#         n = n + 1
#
# def read_file(fpath):
#     BLOCK_SIZE = 1024
#     with open(fpath, 'rb') as f:
#         while True:
#             block = f.read(BLOCK_SIZE)
#             if block:
#                 yield block
#             else:
#                 return
#
# if __name__  == '__main__':
#     for n in fab(6):
#         print(n)

# 8.实现函数，判断字符串是否以”ifg”开头，”@com”结尾，如果是返回中间部分，否则返回None。

# # 9.16进制转换-10进制
# while True:
#     try:
#         print(str(int(input(), 16)))
#     except:
#         break
# #10进制转化16进制
# print(hex(int(input())))

# # 10.字符串最后一个单词的长度
# print(len(input().split(' ').pop()))

# # 11.拼接字符串
# list = ['1', '2', '3']
# str = ', '.join(list)
# print(str)

# # 12.冒泡排序
# def bubble_sort(ls):
#     for i in range(len(ls) - 1):
#         for j in range(len(ls) - i - 1):
#             if ls[j] < ls[j + 1]:
#                 ls[j], ls[j + 1] = ls[j + 1], ls[j]
#             print('第', i + 1, '轮', j + 1, '次', ls, '\t')
#         print('第', i + 1, '次', ls, '\t\n')
#     print('最终结果:', ls)
#
# if __name__ == "__main__":
#     list = [1, 3, 9, 18, 8, 89, 77, 56, 45, 88, 68]
#     for i in bubble_sort(list):
#         print(i)

# # 13.字符串最后的长度
# print(len(input().split(' ').pop()))

# # 14.随机数去重和排序
# while True:
#     try:
#         n = int(input())  # 读入第一行：随机整数的个数
#         res = set()
#         for i in range(n):
#             res.add(int(input()))  # 读入第n行：n个随机整数组成的数组
#         for i in sorted(res):
#             print(i)
#     except:
#         break

# # 15.字符串按比特位分割
# def printStr(str1):
#     # 分成块
#     mod1 = len(str1) % 8
#     n = len(str1) // 8 + 1
#
#     for i in range(n):
#         if i == n - 1 and mod1 != 0:
#             print(str1[8 * i:mod1 + 8 * i].ljust(8, '0'))
#         else:
#             print(str1[8 * i:8 + 8 * i])
#
#
# printStr(input())
# printStr(input())

if __name__ == "__main__":
    pass
