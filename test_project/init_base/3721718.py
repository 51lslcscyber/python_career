# !usr/bin/env python
# -*- coding: utf-8 -*-
# @Time:2022/4/17 17:16
# @version: 1.0.1
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: run again.Do not edit this file unless you know what you are doing.
# 给出集合[1,2,3,...,n]，其所有元素共有n! 种排列。
#
# 按大小顺序列出所有排列情况，并一一标记，当n = 3 时, 所有排列如下：
#
# "123"
# "132"
# "213"
# "231"
# "312"
# "321"
#
# 给定n 和k，返回第k个排列。
#
# 示例 1：
#
# 输入：n = 3, k = 3
# 输出："213"
#
# 示例 2：
#
# 输入：n = 4, k = 9
# 输出："2314"
#
# 示例 3：
#
# 输入：n = 3, k = 1
# 输出："123"
#
# 提示：
#
# 1 <= n <= 9
# 1 <= k <= n!
#
# 以下程序实现了这一功能，请你填补空白处内容：
#
class Solution(object):
    def getPermutation(self, n, k):
        import math
        res = [""]

        def generate(s, k):
            n = len(s)
            if n <= 2:
                if k == 2:
                    res[0] += s[::-1]
                else:
                    res[0] += s
                return
            step = math.factorial(n - 1)
            yu = k % step
            if yu == 0:
                yu = step
                c = k // step - 1
            else:
                c = k // step
            res[0] += s[c]
            generate(s[:c] + s[c + 1:], yu)
            # generate(s[:c + 1] + s[c - 1:], yu)
            # generate(s[:c] + s[c:], yu)
            # generate(s[:c - 1] + s[c + 1:], yu)
            return

        s = ""
        for i in range(1, n + 1):
            s += str(i)
        generate(s, k)
        return res[0]


if __name__ == '__main__':
    s = Solution()
    print(s.getPermutation(3, 2))
