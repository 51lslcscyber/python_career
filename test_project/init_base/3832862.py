# !usr/bin/env python
# -*- coding: utf-8 -*-
# @Time:2022/4/23 18:08
# @version: 1.0.1
# Created by: Python3.9.6
# @author:鹄思鹄想bit森
# WARNING: run again.Do not edit this file unless you know what you are doing.
# 给你一个字符串 s，找到 s 中最长的回文子串。
#
# 示例 1：
#
# 输入：s = "babad"
# 输出："bab"
# 解释："aba" 同样是符合题意的答案。
#
# 示例 2：
#
# 输入：s = "cbbd"
# 输出："bb"
#
# 示例 3：
#
# 输入：s = "a"
# 输出："a"
#
# 示例 4：
#
# 输入：s = "ac"
# 输出："a"
#
# 提示：
#
# 1 <= s.length <= 1000
# s 仅由数字和英文字母（大写和/或小写）组成
def longestPalindrome(s: str) -> str:
    ti = 0
    maxlen = 0
    i = 0
    while i < len(s):
        t = 1
        while t <= i and i + t < len(s):
            if s[i + t] == s[i - t]:
                t += 1
            else:
                break
        t -= 1
        if 2 * t + 1 > maxlen:
            ti = i - t
            maxlen = 2 * t + 1
        i += 1
    i = 0
    while i < len(s):
        t = 1
        while t <= i + 1 and i + t < len(s):
            if s[i - t + 1] == s[i + t]:
                t += 1
            else:
                break
        t -= 1
        if 2 * t > maxlen:
            ti = i - t + 1
            maxlen = 2 * t
        i += 1
    return s[ti:ti+maxlen]


class Solution:
    pass


if __name__ == "__main__":
    pass

# %%
s = Solution()
print(longestPalindrome('babad'))
print(longestPalindrome('cbbd'))
